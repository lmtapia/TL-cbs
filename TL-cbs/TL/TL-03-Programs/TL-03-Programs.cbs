Language "TL"

#3 Programs

Syntax Pgm : pgm ::= decl* stmt+       
Semantics run[[ _:pgm ]] : =>values
     Rule run[[ Stmt+ ]] = handle-return sequential(execute[[ Stmt+ ]])
     Rule run[[ Decl+ Stmt+ ]] =
       scope(collateral(declare[[Decl+]]), 
             handle-return sequential(initialise-funs[[ Decl+ ]], 
                                      execute[[ Stmt+ ]]))                           

Syntax Decl: decl ::= varDecl | funDecl
Semantics declare [[ _ : decl+ ]] : (=>environments)+
     Rule declare [[ VD ]] = declare-vars[[ VD ]]
     Rule declare [[ FD ]] = declare-fun[[ FD ]]
     Rule declare [[ Decl Decl+ ]] = declare[[ Decl ]], 
                                     declare[[ Decl+ ]]

Syntax IL : idList ::= id (',' idList)?

Syntax VD: varDecl ::= 'int' idList
  
Semantics declare-vars [[ _: varDecl? ]]: (=>environments)*
     Rule declare-vars [[ ]] = ()
     Rule declare-vars [[ 'int' IL ]] = declare-int-vars[[IL]]
    
Semantics declare-int-vars[[ _: idList ]] : (=>environments)+
     Rule declare-int-vars[[ ID ]] =
       bind(id[[ ID ]], allocate-initialised-variable(integers, 0))
     Rule declare-int-vars[[ ID ',' IL ]] = 
       declare-int-vars[[ ID ]], declare-int-vars[[ IL ]]


