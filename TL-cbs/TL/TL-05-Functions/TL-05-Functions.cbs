Language "TL"

#5 Functions

Syntax FD :  funDecl ::= 'fun' id '(' idList? ')' block

Semantics declare-fun[[ _:funDecl ]] : =>environments
Rule declare-fun[[ 'fun' ID '(' IL? ')' Block ]] =
	bind( id[[ ID ]], allocate-variable functions(tuples(values*),values))


Semantics initialise-funs[[ _:decl+ ]] : (=>null-type)*
Rule initialise-funs[[ VD ]] = null-value
Rule initialise-funs[[ FD ]] = initialise-fun[[ FD ]]
Rule initialise-funs[[ Decl Decl+]] = initialise-funs[[ Decl ]] , initialise-funs[[ Decl+ ]]

Semantics initialise-fun[[_:funDecl]] : =>null-type
Rule initialise-fun[[ 'fun' ID '(' IL? ')' Block ]] =  
  assign(
      bound(id[[ ID ]]),
      function closure scope(
          match(given,tuple(patts[[ IL? ]])),
          give(sequential(execute[[ Block]]), 
               sequential(free[[IL?]], given ))))  
  

Semantics patts[[ _:idList? ]] : patterns*
     Rule patts[[ ]] = ()
     Rule patts[[ ID ]] = pattern closure(bind(id[[ ID ]],                          
                            allocate-initialised-variable(values, given)))
     Rule patts[[ ID ',' IL ]] = patts[[ ID ]] , patts[[ IL ]]

Semantics free[[ _:idList? ]] : =>null-type
     Rule free[[ ]] = null-value
     Rule free[[ ID ]] = recycle-variables bound-directly(id[[ID]])
     Rule free[[ ID ',' IL ]] = free[[ ID ]], free[[ IL ]]
      
    
    