prime-f:

===================
Result:
null-value

Mutable Entity: store
@1 |-> function(abstraction(closed(scope("...",scope(collateral(bind("div",allocate-initialised-variable(integers,0)),match(given,tuple(pattern(closure(bind("x",allocate-initialised-variable(values,given))))))),give(handle-return(sequential(if-else(is-less(assigned(bound("x")),decimal-natural("2")),sequential(print(to-string(false),"\n")),sequential(if-else(if-else(is-eq(assigned(bound("x")),decimal-natural("2")),true,is-eq(assigned(bound("x")),decimal-natural("3"))),sequential(print(to-string(true),"\n")),sequential(effect(assign(bound("div"),decimal-natural("2"))),effect(last(while-values(not(is-eq(int-mul(checked(int-div(assigned(bound("x")),assigned(bound("div")))),assigned(bound("div"))),assigned(bound("x")))),sequential(assign(bound("div"),int-add(assigned(bound("div")),decimal-natural("1"))))))),if-else(if-else(is-greater(int-mul(assigned(bound("div")),assigned(bound("div"))),assigned(bound("x"))),true,is-eq(int-mul(assigned(bound("div")),assigned(bound("div"))),assigned(bound("x")))),sequential(print(to-string(true),"\n")),sequential(print(to-string(false),"\n"))))))))),sequential(recycle-variables(bound-directly("x")),recycle-variables(bound-directly("div")),given)))))))
@2 |-> 5

