initialise-binding finalise-failing scope
  (collateral
     (bind
        ("prime",
         allocate-variable functions
           (tuples
              ((values)*),
            values)),
      bind
        ("n",
         allocate-initialised-variable
           (integers,
            0))),
   sequential
     (assign
        (bound
           ("prime"),
         function closure scope
           (match
              (given,
               tuple
                 (pattern closure
                    (bind
                       ("x",
                        allocate-initialised-variable
                          (values,
                           given))),
                  pattern closure
                    (bind
                       ("div",
                        allocate-initialised-variable
                          (values,
                           given))))),
            give
              (handle-return sequential
                 (effect
                    (last while-values
                       (not is-eq
                          (int-mul
                             (checked int-div
                                (assigned bound
                                   "x",
                                 assigned bound
                                   "div"),
                              assigned bound
                                "div"),
                           assigned bound
                             "x"),
                        assign
                          (bound
                             ("div"),
                           int-add
                             (assigned bound
                                "div",
                              decimal-natural "1")))),
                  if-else
                    (if-else
                       (is-greater
                          (int-mul
                             (assigned bound
                                "div",
                              assigned bound
                                "div"),
                           assigned bound
                             "x"),
                        true,
                        is-eq
                          (int-mul
                             (assigned bound
                                "div",
                              assigned bound
                                "div"),
                           assigned bound
                             "x")),
                     print
                       (to-string true,
                        "
"),
                     print
                       (to-string false,
                        "
"))),
               sequential
                 (recycle-variables bound-directly
                    ("x"),
                  recycle-variables bound-directly
                    ("div"),
                  given)))),
      null-value,
      effect
        (assign
           (bound
              ("n"),
            decimal-natural "4")),
      last while-values
        (is-greater
           (assigned bound
              "n",
            decimal-natural "0"),
         effect
           (assign
              (bound
                 ("n"),
               int-add
                 (assigned bound
                    "n",
                  int-neg
                    (decimal-natural "1")))),
         apply
           (assigned bound
              "prime",
            tuple
              (read,
               decimal-natural "2")))))